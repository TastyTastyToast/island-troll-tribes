library MotionSensor requires ID, TimerUtils, IsTypeThing, PublicLibrary {

  constant real PING_RATE = 6;
  constant real NUM_PINGS = 5;
  constant real BASE_RANGE = 4000;
  constant real BASE_RANGE_MAP_MAGIC = 8000;
  constant real RANGE_PER_LEVEL = 1000;

  struct PingData {
    player player;

    private integer numTimesPinged = 0;

    static method create( player p ) -> thistype {
      thistype self = thistype.allocate();
      self.player = p;
      return self;
    }

    private method onDestroy() {
      player = null;
    }

    method increment() -> thistype {
      numTimesPinged += 1;
      return this;
    }

    method done() -> boolean {
      return numTimesPinged == NUM_PINGS;
    }
  }

  function Ping( player p ) {
    unit u;
    unit scout = GetPlayersTroll( p );
    group g = CreateGroup();
    real range;

    BJDebugMsg( "playerId: " + I2S( GetPlayerId( p ) ) );
    BJDebugMsg( "trollId: " + ID2S( GetUnitTypeId( scout ) ) );

    // Improved Motion Sensor
    if ( UnitHasBuffBJ( scout, BUFF_MAP_MAGIC ) ) {
      debug BJDebugMsg( "Casting Improved Motion Sensor!" );
      range = BASE_RANGE_MAP_MAGIC + RANGE_PER_LEVEL * I2R( GetUnitAbilityLevel( scout, SPELL_SCOUT_MOTION_SENSOR_R ) ); 
    }
    // Motion Sensor
    else {
      debug BJDebugMsg( "Casting Motion Sensor!" );
      range = BASE_RANGE + RANGE_PER_LEVEL * I2R( GetUnitAbilityLevel( scout, SPELL_SCOUT_MOTION_SENSOR_R ) ); 
    }

    debug BJDebugMsg( "range: " + R2S( range ) );

    GroupEnumUnitsInRangeOfLoc( g, GetUnitLoc( scout ), range, null );
    debug BJDebugMsg( "numUnits: " + I2S( CountUnitsInGroup( g ) ) );

    u = FirstOfGroup( g );
    while ( u != null ) {

      if ( IsUnitEnemy( u, p ) && GetUnitState( u, UNIT_STATE_LIFE ) > 0 ) {
        // Blue Attack ping for Invisible units
        if ( IsUnitTroll( u ) && GetUnitAbilityLevel( u, BUFF_THIEF_CLOAK ) > 0 ) {
            PingMinimapEx( GetUnitX( u ), GetUnitY( u ), PING_RATE, 0, 0, 255, false );
        }
        // Red Attack ping for trolls
        else if ( IsUnitTroll( u ) ) {
            PingMinimapEx( GetUnitX( u ), GetUnitY( u ), PING_RATE, 255, 0, 0, false );
        }
        // Green Attack ping for Boats
        else if ( GetUnitTypeId( u ) == UNIT_TROLL_TRANSPORT_SHIP ) {
            PingMinimapEx( GetUnitX( u ), GetUnitY( u ), PING_RATE, 0, 255, 0, false );
        }
      }

      GroupRemoveUnit( g, u );
      u = FirstOfGroup( g );
    }

    DestroyGroup( g );
    g = null;
    u = null;
    scout = null; // prevent leaks
  }

  function MotionSensor() {
    unit scout = GetTriggerUnit();
    PingData p;

    Ping( GetOwningPlayer( GetTriggerUnit() ) );

    p = PingData.create( GetOwningPlayer( GetTriggerUnit() ) );
    TimerStart( NewTimerEx( p ), PING_RATE, true, function() {
      timer t = GetExpiredTimer();
      PingData p = PingData( GetTimerData( t ) );
      if ( p.done() ) {
        p.destroy();
        ReleaseTimer( t );
      } else {
        SetTimerData( t, p.increment() );
        Ping( p.player );
      }
      t = null;
    });

    scout = null;
  }

  function onInit() {
    trigger t = CreateTrigger( );
    TriggerRegisterAnyUnitEventBJ( t, EVENT_PLAYER_UNIT_SPELL_ENDCAST );
    TriggerAddCondition( t, Condition( function () -> boolean {
      return ( GetSpellAbilityId() == SPELL_SCOUT_MOTION_SENSOR_R );
    }));
    TriggerAddAction( t, function MotionSensor );
  }
}
